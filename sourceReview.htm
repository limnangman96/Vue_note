1차 소스리뷰 : 21/11/29 월요일 5:00-6:30

1. (✔)  npm i / vue create : 설치에 어떤 차이가 있는지 
2. (🎈)  routes > mode : # 붙으면 뭐가 안좋은지?
3. (✔)  메뉴 이름 > routes 에서 설정한 대로 나오게끔 하기 
4. (🎈)  transition > class / event 다 조사해오기 
5. (✔)  transition > css 왜 그렇게 적용했는지 이유 말하기 
6. (✔)  moment > require 말고 다르게 쓸 수 있는 방법 
7. (✔)  moment > 용량 줄여서 적용하는 방법 
8. (✔)  mounted 사용하지 말기 > 템플릿에서 v-for 돌릴 때 조건 걸어서 쓰는 방법
9. (✔)  ref 무엇인지 알아오기 (querySelector 관련되어)
10.(✔)  소스에 빨간줄 왜 그어지는지
11.(✔)  <a> : click 이벤트에 <a>태그는 아니지 않나? 쓸거면 href 이런 기본적인 것은 지키자.
12.(✔)  e.target.checked로 가져오지 않고 체크 여부 알수 있는 방법 
13.(✔)  querySelector쓰지말기 (DOM element 건드리지 말기)
14.(✔)  vue 데이터에 접근해야 하는데 자바스크립트로 함 > vue 방식으로 수정하기 
15.(✔)  v-model / v-bind / v-on / getters / : / @
16.(✔)  scoped 의미, 전체에서 접근할 수 있는 scss 파일 만들지 왜 ?
17.(🎈)  $emit, v-on 공부
18.(🎈)  props default값 넣어주기
19.(✔)  data () { return{ } } return 쓰는 이유 > 민주매니저님께 이야기 듣기 
20.(✔)  v-show / v-if 차이 알아오기 
21.(✔)  @click = "" 할 때, 함수 실행이면 괄호 쳐주고( clickEvent() ), 바인딩이면 함수명만 써주기 약속 
22.(✔)  html 내 인라인으로 추가할 때 기본속성은 앞에(type, href), v- 는 뒤에 <a href="#" v-if="" v-for=""></a>
23.(✔)  store > 로컬스토리지 : 플러그인 쓰지 말고 코드로 직접 구현해보기 
24.(🎈)  vue 공식문서 읽어보기. option은 위에 랭킹되어 있을 수록 많이 쓰인다는 뜻! 되도록 다 외우기 
25.(✔)  forEach 돌릴 때 el 이런식으로 불명확하게 쓰지 말기 
26.(✔)  state 에 todoData forEach 안돌리고 쓸 수 있는 방법 (key 값이나 공유한 값으로 비교하기)
27.(✔)  setEditTodo 같은 값이면 다 같이 바뀐다. 고유한 key 값 필요
28.(✔)  findIndex 무엇인지 알아보고 적용해보기


/* 소스 왜 이렇게 짰나? "그냥요"는 안된다. 
질문할 때 본인이 하는 질문 명확히 알고 하기 */


<1>
    ❤ npm i / vue create : 설치에 어떤 차이가 있는지
        # cli 설치방법
            npm install -g @vue/cli 
            vue create 프로젝트명 
            > Default ([Vue2] babel, eslint) 선택  

        # Vue CLI는 애플리케이션에 필요한 요소들을 대화형 커맨드로 쉽게 설치하도록 도와준다. 
            Vue CLI의 3가지 요소
            - CLI : CLI(@vue/cli)는 전역적으로 설치된 npm 패키지이며, Vue.js 프로젝트를 생성하는 vue create, UI를 통해 프로젝트를 관리할 수 있는 vue ui등 터미널에서 vue를 사용한 명령어를 제공한다. 

            - CLI service : CLI Service는 webpack, webpack-dev-server 위에 구축이 되며, CLI Plugin을 실행하는 핵심 서비스와 webpack에 대한 설정을 포함하고 있다. 즉 webpack을 통해 애플리케이션의 개발 서버 실행, 빌드 등을 처리한다.  
            ( serve 개발서버 시작 / build 배포를 위한 빌드 / inspect 웹팩 내부설정 보기 / lint 소스코드 작성 규칙 검사 및 수정 )

            - CLI Plugin : Babel/TypeSecript, ESLint, e2e, Test, 단위 테스트와 같은 선택적으로 설치가 필요한 Plugin을 말하며, 프로젝트 생성 과정에서 포함하거나 이후에 포함할 수 있다. 

        # Vue CLI3을 이용한 Plugin 설치 
            Vue CLI를 통해 plugin을 설치하기 위해서는 vue add 커맨드를 사용하면 된다. 
            vue add axios 
            
                *** 만약 (npm i axios) npm으로 설치했다면 main.js 또는 app.js에 수동적으로 추가해주었을 Vue.use()가 자동으로 생성되어 있다. 어디에? src > main.js 에!   
            
                main.js > 
                    import '..plugins/axios'

        # NPM verse CLI (https://kr.vuejs.org/v2/guide/installation.html)
            
            - npm
                vue를 사용하여 대규모 애플리케이션을 구축할 때 NPM을 이용한 설치를 권장하고 있다. NPM은 webpack 또는 Browserify와 같은 모듈 번들러와 잘 작동한다. Vue는 싱글 파일컴포넌트를 만들기 위한 도구도 제공한다. 
                    # 최신 안정화 버전 
                    $ npm install vue

            - CLI 
                CLI(@vue/cli)는 전역적으로 설치된 npm패키지이며 vue 터미널에 명령을 제공한다. 핫 리로드, 저장시 린트 체크 및 프로덕션 준비가 된 빌드로 시작하고 행하는데 몇분 걸리지 않는다.
                    $ npm install -g @vue/cli
</1>


<2>
    ❤ routes > mode : # 붙으면 뭐가 안좋은지? (https://blinders.tistory.com/76)
    
    url에 붙는 해시태그의 주요역할은 브라우저의 인식인데, 기본적으로 브라우저는 #이 붙은 url의 뒷 내용은 인지하지 못한다. 일반적인 경우에 # 뒤의 값이 변하더라도 브라우저는 새로운 화면을 로드하지 않는다. 때문에  
    http://localhost:9090/#/book/main 에서 main이 아닌 rent로 이동한다고 해도 브라우저는 화면이 전환되었다고 인지하지 못한다는 것. 대신에 vue-router가 그걸 인지하고 url에 알맞게 매핑된 컴포넌트를 호출해준다. 


    반면에 해시태그가 없는 경우, 브라우저 스스로가 url이 바뀌었음을 인지하게 된다. history.pushState API 이용하여 페이지를 다시 로드하지 않고 url을 탐색할 수 있다. 그리고 그에 따라서 알맞은 vue 컴포넌트를 호출하게 되는데 단, 이 경우에는 적절하게 매핑된 컴포넌트가 없을 경우 서버측으로부터의 404에러(not found)가 발생한다. 
    
    서버를 구성하는 방법 (apache 변경) 😆😆😆 https://blog.1day1.org/611
        <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteBase /
            RewriteRule ^index\.html$ - [L]
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteRule . /index.html [L]
        </IfModule>

    또 사용자에게 404에러가 발생했음을 알리기 위해 route에 다음과 같이 설정하여 페이지를 만든다.  

        {
            path: "/:catchAll(.*)", //:catehAll은 동적세그먼트이며 (.*)은 모든 항목과 일치하는 정규식
            component: () => import('@/views/NotFoundView'),
        }

    (+) 더불어 공부하는 path
        query 방식 : /user/detail?userId=grey   
                    물음표 뒤에 붙은 것들은 key=value 형태
        param 방식 : /user/detail/grey
</2>


<4>
    ❤ transition > class / event 다 조사해오기 
        [ 트랜지션 클래스 : class ]   
            v-enter : enter의 시작상태. 엘리먼트가 삽입되기 전에 적용되고 한 프레임 후에 제거된다. 
            v-enter-active : enter에 대한 활성 및 종료상태. 엘리먼트가 삽입되기 전에 적용된다. 트랜지션/애니메이션이 완료되면 제거된다. 
            v-enter-to : (2.1.8이상 버전에서 지원) 진입 상태의 끝에서 실행됨. 엘리먼트가 삽입된 후 (동시에 v-enter가 제거됨) 트랜션/애니메이션이 끝나면 제거된다.   
            v-leave : leave를 위한 시작 상태. 진출 트랜지션이 트리거 될 때 적용되고 한 프레임 후에 제거됨. 
            v-leave-active : leave에 대한 활성 및 종료상태. 진출 트랜지션이 트리거되면 적용되고 트랜지션 / 애니메이션이 완료되면 제거된다. 
            v-leave-to : 2.1.8 이상 버전에서 지원됨. 진출상태의 끝에서 실행된다. 진출 트랜지션이 트리거 되고, (동시에 v-leave가 제거됨) 트랜지션/애니메이션이 끝나면 제거된다. 

            각 클래스에는 트랜지션 이름이 접두어로 붙는다. 기본값은 v- 이며, <transition name="my-transi"> 을 사용하면 v-enter 클래스는 my-transi-enter가 된다.
        
        [ 트랜지션 지속시간 : duration ]
        <transition> 컴포넌트에 duration 속성을 사용하여 명시적인 트랜지션 지속 시간(밀리 초)를 지정할 수 있다. 
            <transition :duration="1000">....</transition>
            <transition :duration="{enter : 500, leave : 800}">....</transition>

        [ 속성에서 javascript 훅 정의 v-on ]
            <transition
                v-on:before-enter="beforeEnter"
                v-on:enter="enter"
                v-on:after-enter="afterEnter"
            >
            </transition>

            methods: {
                beforeEnter: function(el) {
                    // ...
                },
                enter: function(el, done) {
                    done() ***
                }
            }

            javascript 전용 트랜지션을 하는 경우 'enter' 및 'leave' 훅에서는 ***'done' 콜백이 필요하다. 그렇지 않으면 동기적으로 호출되고 트랜지션이 즉시 완료된다.

        [ 최초 렌더링 시 트랜지션 ] 
            노드의 초기 렌더에 트랜지션을 적용하고 싶다면 appear 속성을 추가할 수 있다. 
                <transition></transition appear>
            
            원하는 경우 사용자 정의 css 클래스를 지정할 수도 있다. 
                <transition
                    appear
                    appear-class="custom-appear-class"
                    appear-active-class="custom-appear-active-class"
                ></transition>
            사용자정의 javascript 훅을 사용할 수도 있다.
                <transition
                    appear
                    v-on:appear-class="custom-appear-class"
                    v-on:appear-active-class="custom-appear-active-class"
                ></transition>

        [ 엘리먼트간 트랜지션 v-if / v-else ]
                <transition>
                    <table v-if="items.length > 0">
                        <!-- ... -->
                    </table>
                    <p v-else>콘텐츠가 없습니다.</p>
                </transition>

                *** 이 때 같은 태그 이름을 가진 엘리먼트 사이를 트랜지션 할 때, Vue에 고유한 'key' 속성을 부여함으로써 별개의 엘리먼트임을 말해줘야 한다. 그렇지 않으면 Vue의 컴파일러는 효율성을 위해 엘리먼트의 내용만 바꾼다. 기술적으로 불필요하더라도, 항상 key값을 부여한는 것이 좋다. 
                
                <transition>
                    <button v-if="isEditing" key="save">
                        Save
                    </button>
                    <button v-else key="edit">
                        Edit
                    </button>
                </transition>
                
                이러한 경우, key 속성을 사용하여 여러 상태 사이를 트랜지션 할 수 있다. v-if 와 v-else 대신에 위 예제를 다음과 같이 재 작성할 수 있다.

                <transition>
                    <button type="button" v-bind:key="isEditing">
                        {{ isEditing ? 'save' : edit }}
                    </button>
                </transition> 
        
        [ 트랜지션 모드 ]
            동시에 들어가고 떠나는 트랜지션 예제'처럼 동작이 겹치는 이슈에 대한 대안 !
                <transition name="fade" mode="out-in">
                    <!-- ... the buttons ... -->
                </transition>
            in-out : 처음에는 새로운 엘리먼트가 트랜지션되고 완료되면 현재 엘리먼트가 트랜지션 된다. 
            out-in : 현재 엘리먼트가 먼저 트랜지션 되고, 완료되면 새로운 요소가 바뀐다.

        [ 컴포넌트간 트랜지션 ]
            컴포넌트 간 트랜지션은 더욱 간단하다. key 속성이 필요 없으며, 대신 동적 컴포넌트를 래핑한다. 

        [ 리스트 트랜지션 transition-group ]
            그렇다면 v-for를 사용하여 동시에 렌더링 하고자하는 항목의 전체 목록이 있는 경우는 어떠할까? 
            * 아주멋진 예제 확인해보기 : https://kr.vuejs.org/v2/guide/transitions.html#%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%8A%B8%EB%9E%9C%EC%A7%80%EC%85%98
            
            <transition-group> 컴포넌트를 사용한다. 이 컴포넌트의 특징으로는,
                특징 1. <transition>과 달리, 실제 요소인 <span>을 랜더링 한다. tag 속성으로 렌더링 된요소를 변경할 수 있다. 
                특징 2. 트랜지션 모드는 사용할 수 없다. 
                특징 3. 엘리먼트 내부 구현은 항상 필요하다. 고유한 key 속성을 갖는다. 
                특징 4. CSS 클래스는 그룹/컨테이너 자체가 아닌 내부 요소에 적용됩니다.

                <div id="list-demo">
                    <button v-on:click="add">Add</button>
                    <button v-on:click="remove">Remove</button>
                    <transition-group name="list" tag="p">
                      <span v-for="item in items" v-bind:key="item" class="list-item">
                        {{ item }}
                      </span>
                    </transition-group>
                </div>

                new Vue({
                    el: '#list-demo',
                    data: {
                      items: [1,2,3,4,5,6,7,8,9],
                      nextNum: 10
                    },
                    methods: {
                      randomIndex: function () {
                        return Math.floor(Math.random() * this.items.length)
                      },
                      add: function () {
                        this.items.splice(this.randomIndex(), 0, this.nextNum++)
                      },
                      remove: function () {
                        this.items.splice(this.randomIndex(), 1)
                      },
                    }
                })

                .list-item {
                    display: inline-block;
                    margin-right: 10px;
                }
                .list-enter-active, .list-leave-active {
                    transition: all 1s;
                }
                .list-enter, .list-leave-to /* .list-leave-active below version 2.1.8 */ {
                    opacity: 0;
                    transform: translateY(30px);
                }

        [ 리스트 이동 트랜지션 v-move ]
            <transition-group> 컴포넌트는 또 다른 속임수를 가지고 있다. 그것은 진입과 진출뿐만 아니라 위치의 변화도 생생하게 표현할 수 있다. 이 기능을 사용하기 위해 알아야 할 유일한 새로운 개념은 아이템이 위치를 바꿀 때 추가되는 v-move 클래스를 추가하는 것. 다른 클래스와 마찬가지로 접두어는 제공된 name 속성 값과 일치하며 move-class 속성을 사용하여 클래스를 수동으로 지정할 수도 있다. 

                .flip-list-move {
                    transition: transform 1s;
                }


        [ 트랜지션 재사용 ]
            트랜지션은 Vue의 컴포넌트 시스템을 재사용할 수 있다. 재사용할 수 있는 트랜지션을 만드려면 루트에 <transition> 또는 <transition-group> 컴포넌트를 놓은 다음, 자식을 트랜지션 컴포넌트에 전달한다. 

                Vue.component('my-special-transition', {
                template: '\
                      <transition\
                        name="very-special-transition"\
                        mode="out-in"\
                        v-on:before-enter="beforeEnter"\
                        v-on:after-enter="afterEnter"\
                      >\
                        <slot></slot>\
                      </transition>\',
                    methods: {
                      beforeEnter: function (el) {
                        // ...
                      },
                      afterEnter: function (el) {
                        // ...
                      }
                    }
                })



        [ 동적 트랜지션 v-bind ]  @TODO 보충해서 보기
            Vue의 트랜지션도 데이터 기반이다. 동적 변환의 가장 기본적인 예제는 name 속성을 동적 속성에 바인딩한다. 
                <transition v-bind:name="transitionName">
                    <!-- ... -->
                </transition>

            이는 Vue의 트랜지션 클래스 규칙을 사용하여 css 트랜지션 / 애니메이션을 정의하고 단순히 트랜지션하려는 경우에 유용할 수 있다.

            실제로 모든 트랜지션 속성은 동적으로 바인딩될 수 있다. 그리고 그것은 단지 속섣이 아니다. 이벤트 훅은 단지 메소드이기 때문에 컨텐스트의 모든 데이터에 액세스 할 수 있다. 즉, 컴포넌트의 상태에 따라 Javascript 트랜지션이 다르게 동작할 수 있다. 

            <div id="dynamic-fade-demo" class="demo">
                Fade In: <input type="range" v-model="fadeInDuration" min="0" v-bind:max="maxFadeDuration">
                Fade Out: <input type="range" v-model="fadeOutDuration" min="0" v-bind:max="maxFadeDuration">
                <transition
                  v-bind:css="false"
                  v-on:before-enter="beforeEnter"
                  v-on:enter="enter"
                  v-on:leave="leave"
                >
                  <p v-if="show">hello</p>
                </transition>
                <button
                  v-if="stop"
                  v-on:click="stop = false; show = false"
                >Start animating</button>
                <button
                  v-else
                  v-on:click="stop = true"
                >Stop it!</button>
            </div>

            new Vue({
                el: '#dynamic-fade-demo',
                data: {
                  show: true,
                  fadeInDuration: 1000,
                  fadeOutDuration: 1000,
                  maxFadeDuration: 1500,
                  stop: true
                },
                { ... }
            })

            동적 트렌지션을 만드는 궁극적인 방법은 사용되는 트렌지션의 특성을 변경하기 위해 props를 받는 컴포넌트를
            사용하는 것이다. 
</4>


<5>
    ❤ transition > css 왜 그렇게 적용했는지 이유 리포팅 
    진입했을 때는 opacity가 0이었다가 0.5초 동안 선명해지게끔 이미 나간 뒤에도 0.5초동안 opacity로 여운을 주기위하여
</5>


<6>
    ❤ moment > require 말고 다르게 쓸 수 있는 방법 
        const moment = require("moment"); 
        import moment from "moment";

        # require("something");

            Node.JS 에서는 require 메서드를 통해 외부 모듈을 가지고 올 수 있다. require 메서드는 node가 local object에 추가한 메서드로서 다음과 같이 파라미터로 추가할 모듈의 파일 경로값을 받는다. 
            const something = require("파일 경로");

        # 외부 라이브러리를 불러오는 코드 ( https://www.daleseo.com/js-module-import/ )
            
            require : CommonJS 방식을 따름 (Ruby)
                - exports :  복수객체를 내보낼 경우 변수 자체에 할당  
                - module.exports : 단일객체 내보낼 경우, exports 변수의 속성으로 할당

                복수객체 내보내기
                    #currency-functions.js > 내보내기
                        const exchangeRate = 0.91;

                        function roundTwoDecimals(amount) {
                            return Math.round(amount * 100) / 100;
                        }

                        const canadianToUs = function (canadian) {
                            return roundTwoDecimals(canadian * exchangeRate);
                        };

                        function usToCanadian(us) {
                            return roundTwoDecimals(us / exchangeRate);
                        }

                        exports.canadianToUs = canadianToUs; // 내보내기 1
                        exports.usToCanadian = usToCanadian; // 내보내기 2

                    # test-currency-functions.js > 접근
                        const currency = require("./currency-functions");
                        console.log(currency.canadianToUs(50));
                        console.log(currency.usToCanadian(30));

                단일객체 내보내기 
                    #currency-class.js  > 한 객체에 담아 내보내기
                        const obj = {};
                        obj.canadianToUs = function (canadian) {
                            return roundTwoDecimals(canadian * exchangeRate);
                        };

                        obj.usToCanadian = function (us) {
                            return roundTwoDecimals(us / exchangeRate);
                        };

                        module.exports = obj;
                        
                    # test-currency-object.js > 접근
                        const currency = require("./currency-object");
                        console.log(currency.canadianToUs(50));
                        console.log(currency.usToCanadian(30));
                
                        
            import : ES6 방식을 따름 (Java/Python)
                
                CommonJS 방식 대비 가독성이 좋다. 또한 비동기 방식으로 작동하고 모듈에서 실제로 쓰이는 부분만 불러오기 때문에 성능과 메모리 부분에서 유리한 측면이 있다. 

                - export : 복수 내보낼 경우
                - export default : 단일 내보낼 경우

                복수객체 내보내기
                    #currency-functions.js > 내보내기
                        const exchangeRate = 0.91;

                        // 안 내보냄
                        function roundTwoDecimals(amount) {
                            return Math.round(amount * 100) / 100;
                        }

                        // 내보내기 1
                        export function canadianToUs(canadian) {
                            return roundTwoDecimals(canadian * exchangeRate);
                        }

                        // 내보내기 2
                        const usToCanadian = function (us) {
                            return roundTwoDecimals(us / exchangeRate);
                        };
                        export { usToCanadian };

                    #test-currency-functions.js > 접근
                        // Destructuring
                        import { canadianToUs } from "./currency-functions";
                        console.log(canadianToUs(50));

                        // Alias (별명으로 붙러오기)
                        import * as currency from "./currency-functions";
                        console.log(currency.usToCanadian(30));

                단일객체 내보내기 > 하나의 객체에 두 함수 담아서 내보내기 이름없이 내보냈기에 받을 때 이름지어주기
                    #currency-object.js
                        const exchangeRate = 0.91;

                        // 안 내보냄
                        function roundTwoDecimals(amount) {
                            return Math.round(amount * 100) / 100;
                        }
                        
                        // 내보내기
                        export default {
                            canadianToUs(canadian) {
                                return roundTwoDecimals(canadian * exchangeRate);
                            },
                            
                            usToCanadian: function (us) {
                                return roundTwoDecimals(us / exchangeRate);
                            },
                        };

                    #test-currency-object.js
                        import currency from "./currency-object";
                        console.log(currency.canadianToUs(50));
                        console.log(currency.usToCanadian(30));
</6>


<7>
    ❤ moment > 용량 줄여서 적용하는 방법
    https://velog.io/@kangsan/Vue.js-Bundle-%EC%B5%9C%EC%A0%81%ED%99%94
    
    # webpack의 번들 분석 플러그인 설치
        npm i --save-dev webpack-bundle-analyzer

        moment.js 가 가장 큰 용량을 차지하고 있는데, 그 이유는 전세계 locale 정보를 담고 있어서이다. 시간 국제화가 필요없고 시간 계산만 하는 용도로 사용한다면 locale 을 제거한 moment.js 만 사용하자.

    # vue.config.js 수정
        const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

        module.exports = {
            configureWebpack: {
                plugins: [new BundleAnalyzerPlugin()],
                resolve: {
                    alias: {
                        moment: 'moment/src/moment'
                    }
                }
            }
        };
</7>


<9>
    ❤ ref 무엇인지

    getElementsById getElementsByClassName Document.creatElement() 등등 고전적인 메서드를 활용해 DOM을 직접 조작해 HTML 구조를 자바스크립트로 변경이 가능하다. 하지만 Vue는 가상DOM을 사용하기 때문에 이런 메서드의 사용을 피하라고 권고하고 있다. 

    refs의 사용처는 
    첫째, Javascript로 Props&Event 거치지 않고 자식컴포넌트로 직접 접근한다.
    둘째, DOM 조작 메서드 없이 엘리먼트 조작한다. 

    사용방법은 class를 명명하는 것 처럼 HTML엘리먼트에 ref="test"라고 명명지어주면 된다. 

    사용은 this.$refs.test 이런 식으로 접근한다.

    https://velog.io/@keywookim/B.TIL-06-vue-ref-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0
</9>


<10>
    ❤ 소스에 빨간줄 왜 그어지는지
        v-for를 사용할 때, v-bind로 key값이 요구된다.
</10>


<15>
    ❤ v-model / v-bind / v-on / getters / : / @

        v- 접두어가 붙으면 렌더링된 DOM에 특수한 반응형 동작을 한다. 
            기본 디렉티브 (기본 지시어)
                v-text : innerText와 동일한 기능 수행. 태그를 인코딩하여 그대로 보여준다. 
                v-html : innerHTML과 동일한 기능 수행. 태그를 파싱하여 화면에 구현한다. 
                v-bind : .attr()과 비슷한 기능 수행. 태그의 속성을 동적으로 변경할 때 사용한다. 
                v-model: 양방향 데이터를 공유할 때 사용한다. 
                v-show : css의 display 동일한 기능을 수행한다.
                v-if   : if 조건문 구현 
                v-else : else 조건문 구현 
                v-else-if : else if 조건문 구현 
                v-for  : for 반복문 구현 
                v-pre  : vue.js가 컴파일되지 않게 하며, {{ 머스태쉬 }}도 그대로 보여진다.
                        ( <h1 v-pre>{{ 나는야 data에 없는 값 }}</h1> v-pre 빼면 error나지만 넣으면 그대로 보여진다. )
                v-once : vue.js가 처음 한번만 렌더링을 수행하며 데이터가 변경되어도 처음값만 보여준다. 
                v-cloak : 컴파일 되지 않는 값이 순간 나오는 것을 막고 결과값만 보여준다. //렌더링 과정에서 깜빡이는것 방지
                v-on   : 엘리먼트에 이벤트 리스너 연결. DOM에 이벤트가 발생했을 때 javascript를 실행한다.

        short-hand 기호
            : v-bind 대신 콜론(:)을 이용하기도 한다.
            @ v-on 대신 @을 이용한다. ++ v-on 이벤트리스너는 항상 자동으로 소문자 변환된다.

        getters 
            state를 기반으로 계산을 해야할 때 컴포넌트에서 공통으로 계산하는 것을 넣어주어 효율성 가독성을 높인다. 
</15>


<16>
    ❤ scoped 의미 + 전체에서 접근할 수 있는 scss 파일 만들지 왜 ?
    style 태그 내에 scoped 속성을 가지고 있으면 css는 현재 컴포넌트의 엘리먼트에만 적용된다.
</16>


<17>
    ❤ $emit, v-on 공부
        this.$emit("이벤트명", 넘겨줄값)

    +++ 이벤트 이름, props 이름을 대문자와 소문자를 혼용하여 작성하였다면 DOM 엘리먼트에는 Kebab Case로 작성하는 것을 권장한다.
        Camel Case
            lim Ji Won     
        Kebab Case 
            lim-ji-won 
        Snake Case
            lim_ji_won
            LIM_JI_WON
        Pascal Case
            Lim Ji Won
</17>


<18>
    ❤ props의 default값 넣어주기 @TODO 보충해서 이해하기
        객체는 함수형으로 작성하여 return 하여야 한다.
</18>


<19>
    ❤ data에 return 이 쓰이는 이유
        data가 함수형인 이유 
            객체 형식으로 정의된 property들은 컴포넌트 사이에서 공유된다. methods나 computed는 재사용을 하기 위해 객체 형태로 제공되었지만, 데이터는 기본적으로 재사용을 하지 않고 고유의 값을 유지하길 원하기 때문에 각 컴포넌트가 분리해서 관리할 수 있도록 함수형태로 제공하는 것이다. (함수형태로 작성하고 return 하여 데이터 쓴다.)
</19>


<20>
    ❤ v-show / v-if 차이 알아오기 

    v-if
        조건에 따라 블록을 렌더링 하기 위해 사용된다. 
        블록은 디렉티브(v-if)의 표현식이 true 값을 반환할 때만 렌더링 된다.
        <template>에 v-if 사용할 수 있음 

    v-show 
        엘리먼트를 조건부로 표시하기 위한 디렉티브
        항상 렌더링되고 DOM에 남아있다. 
        단순히 엘리먼트에 display CSS속성을 토글한다. 
        <templete>에 v-show 사용할 수 없음 
    
    이 둘의 차이점 
        v-if 는 조건에 따라 엘리먼트가 제거되고 새로 렌더링 된다. v-show는 조건에 따라 엘리먼트가 새로 렌더링 되는게
        아니라 단순히 css의 display 속성값만 변경된다. (display: none의 유무)
</20>


<28>
    ❤ findIndex 무엇인지 알아보고 적용해보기
        Array.prototype.findIndex(callback(ele [, index[, array]]))
        주어진 판별 함수를 만족하는 배열의 첫번째 요소에 대한 인덱스를 반환한다. 만족하는 요소가 없으면 -1을 반환한다.
        
        let arr = [10,17,18,12,90,32]
        let test = (el) => el > 18;
        arr.findIndex(test);  //4
</28> 




2차 소스리뷰 : 21/12/02 목요일 5:00-6:00

1.  ( ) 로컬스토리지 / 스토어 너무 중구난방으로 쓰고 있음 
2.  ( ) watch에서 deep-option 쓰면 상태변화 감지되는지?
3.  (✔) 화살표함수, 그냥 함수에서 this의 의미
4.  (✔) <a>태그 말고 다른 태그 뭐 쓸 수 있는지 알아오고 수정하기 
5.  (✔) @click.prevent 이렇게 쓰면 되지 않나? vue 가이드 보고 적용하기 
6.  ( ) done 클래스 붙일 때 indexOf > index를 return하기 때문에 판별함수에 쓰기엔 적합하지 않다. 
7.  ( ) done 클래스 붙일 때 로컬스토리지에서 값을 꺼내오는게 아니라 gettersList에서 꺼내와야 하지 않나?
8.  (✔) <input type="text"> change, input 이벤트 차이 
9.  ( ) input 체크하는 곳에서 item 값 이미 들고있는데 store까지 가지 말고 계산해서 아예 계산된 값을 넣어주기 
10. ( ) editComplete 함수내에서 공통으로 쓰이는거 변수화하기
11. ( ) 명명할 때 함수는 동사형, 변수는 명사형 !! 보통 메서드는 앞에 동사가 붙는다 (get,fetch ... )
12. ( ) 반복돌려서 return 값이 객체가 필요하면 쓰는 메서드
13. ( ) transition 다시 공부 
14. ( ) routes > index.js > 삼항연산자 안에서 데이터 부여하는 것은 아니다. 
15. ( )                   > findIndex 안에 함수 변수로 빼지말고 익명함수로 바로 넣어라 
16. ( ) AddListView.vue > 변수명 value 쓰지 말기 (이미 있는 거니까)
17. ( ) methods 에서 각 함수의 명과 역할이 모호하다. modalClose 
18. ( ) mounted > 처음 진입시 input value 초기화 필요하다. 
                > v-if 하면 다시 랜더링이 되니까 데이터도 다 싹 새로 그려질 것이다 ? NO! v-if를 컴포넌트 자체에 쓰면 그러하겠지만, 내부 태그에 썼기 때문에 데이터 자체는 렌더링이 된다. 
19. ( ) v-if 는 태그에 직접쓰지 않고 <templete>에 쓴다. 

<3>
    ❤ 화살표함수, 그냥 함수에서 this의 의미
        일반 함수에서 this는 함수를 호출할 때 this에 바인딩 할 객체가 동적으로 결정된다. 
        이에반해 화살표 함수의 this는 함수를 선언할 때 this에 바인딩 할 객체가 정적으로 결정된다. 화살표 함수의 this는 언제나 상위 스코프의 this를 가리킨다. 

        스코프 
            - 스코프란 무엇인가 :참조대상식별자 규칙 
            - 스코프 구분 : 전역/지역 스코프 
            - 비 블록 레벨 스코프 (if문) ... var와 let의 차이
            - Lexical 스코프 : 어디서 호출하는지(X) 어디서 선언되었는지(O)
            - 암묵적 선언 : 전역 객체의 프로퍼티로 추가, 호이스팅 불가 
        
        this 
            1. 함수호출
            - 기본적으로 this는 전역객체에 바인딩된다. 전역함수, 내부함수, 메소드의 내부함수, 콜백함수  // 예외는 메소드에서의 this
            - 내부함수의 this가 전역객체를 참조하는 것을 회피하는 방법 
                (1) 메소드 내에서 this를 변수에 담고, 메소드 내부함수에서 변수 사용 
                (2) this를 명시적으로 바인딩할 수 있는 javascript 메소드 사용하기 ... apply(obj, []) call(obj, , ), bind(this)() 
                    ** 기억해야할 것은 apply(), call()은 메소드를 호출하는 주체는 함수이며, this를 특정 객체에 바인딩할 뿐 본질적인 기능은 함수 호출이라는 것이다. 
            
            2. 메소드 호출
            - 함수가 객체의 프로퍼티 값이면 메소드로서 호출된다. 이 때 메소드의 내부의 this는 해당 메소드를 소유한 객체, 즉 해당 메소드를 호출한 객체에 바인딩 된다.
            - 프로토타입 객체도 메소드를 가질 수 있다. 프로토타입 객체 메소드 내부에서 사용된 this도 일반 메소드 방식과 마찬가지로 해당 메소드를 호출한 객체에 바인딩된다.
            
            3. 생성자 함수 호출
            -생성자 함수를 new 없이 호출한 경우, 함수 Person 내부의 this는 전역객체를 가리키므로 name은 전역변수(window)에 바인딩된다
        
        화살표함수
            - 화살표 함수의 기본문법 
                (1) 매개변수 지정방법 
                (2) 함수 몸체 지정 방법 : 몸체가 한줄의 구문이면 중괄호, return 생략 
                (3) 중괄호 생략한 채 객체 반환시 소괄호를 사용한다. 
            - 화살표 함수의 호출 : 화살표 함수는 익명함수로만 사용할 수 있다. 화살표 함수를 호출하기 위해서는 함수 표현식을 사용한다. 
            - 콜백함수로도 사용할 수 있다. 
        
        화살표 함수의 this
            - 화살표함수는 함수를 선언할 때 this에 바인딩할 객체가 정적으로 결정된다. 동적으로 결정되는 일반 함수와는 달라 함수의 this는 언제나 상위 스코프의 this를 가리킨다.
              이를 Lexical this 라고 한다. (화살표 함수의 this 바인딩 객체 결정 방식은 함수의 상위 스코프를 결정하는 방식인 Lexical 스코프와 유사하다.)
            - 화살표 함수는 call, apply, bind 메소드를 사용하여 this를 변경할 수 없다. 
            - 화살표 함수를 사용해서는 안되는 경우 
                (1) 메소드
                (2) 프로토타입
                (3) 생성자함수 
</3>


<4>
    ❤ <a>태그 말고 다른 태그 뭐 쓸 수 있는지 알아오고 수정하기
        click event 걸어놓으면 클릭 가능. cursor:pointer 주기
</4>


<5>
    ❤  @click.prevent 이렇게 쓰면 되지 않나? vue 가이드 보고 적용하기 
            # 이벤트 수식어
                이벤트 핸들러 내부에서 event.preventDefault() 또는 event.stopPropergation() 을 호출하는 것은 매우 보편적인 일이다. 메소드 내에서 쉽게 이 작업을 할 수 있지만 DOM 이벤트 세부 사항을 처리하는 대신 데이터 로직에 대한 메소드만 사용할 수 있으면 더 좋을것이다. 
                이문제를 해결하기 위해 v-on 이벤트에 이벤트 수식어를 제공한다. 수식어는 점으로 표시되는 접미사이다. 

                <a v-on:발생이벤트.원하는이벤트수식어="메소드이벤트명"></a>

                stop : stopPropergation과 같은 기능으로 이벤트 전파를 중지시킴
                prevent : preventDefault와 같은 기능으로 기본 이벤트의 실행을 중단시킴 
                capture : 포착단계에서만 이벤트를 발생시킴 우선순위를 무시하고 가장먼저 실행됨.
                            (부모에 capture 걸려있고, 자식이 클릭되면 부모이벤트 먼저 탄 뒤 자식이벤트 탄다.)
                self : 발생단계에서만 이벤트를 발생시킴. 오로지 자기 자신만 호출함. 
                        (부모에 self 걸려있고, 자식이 클릭되어도 부모(self)는 안 탄다.)
                once : 이벤트를 한번만 발생시킴 
                passive : preventDefault의 반대 이벤트 수식어로, 기본이벤트를 취소할 수 없게함.
</5>


<8>
    ❤ <input type="text"> change, input 이벤트 차이 

        # change 이벤트
            focus가 발생하기 전 value의 속성 값에 변경이 있으면, blur 된 직후 발생하는 이벤트 
        # input 이벤트 
            value 속성의 값이 바뀔 때마다 발생하는 이벤트. 
            input 이벤트 객체의 data 프로퍼티는 value 속성에 가장 최근 추가된 한 글자를 가지고 있다. (영어의 경우 알파벳 한 글자, 한국어의 경우 초성/중성/종성으로 이루어진 한 글자)
            (+) input 영어 알파벳은 각 글자가 독립된 한 글자이지만 한국어는 자음과 모음이 조합되어 글자가 만들어진다. 이런 특성 때문에, 한국어 입력은 새로운 글자가 시작되는 시점에 input 이벤트가 한번 더 발생한다. 
        # keyup 이벤트 
            input 이벤트 발생 후, value가 업데이트 된 이후에 키보드에서 손을 떼면 발생하는 이벤트. 키를 꾹 눌러서 입력이 반복되게 하는 경우에는 발생하지 않는다. 
        # keydown 이벤트 
            키가 눌렸을 때 발생하는 이벤트. input 이벤트 전에 발생된다. 

        # 이벤트 발생 순서
            keyDown > input > keyUp > change
</8>